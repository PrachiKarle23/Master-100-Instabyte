//Recursion
class Solution {
public:
    int solve(vector<int>& nums,int n)
    {
        if(n<0){
          return 0;
        }
        int incl=nums[n]+solve(nums,n-2);
        int excl=solve(nums,n-1);
        return max(incl,excl);
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        return solve(nums,n-1);
    }
};

//Top down DP
class Solution {
public:
    int solve(vector<int>& nums,int n,vector<int>& dp)
    {
        if(n<0){
          return 0;
        }
        if(dp[n]!=-1){
            return dp[n];
        }
        int incl=nums[n]+solve(nums,n-2,dp);
        int excl=solve(nums,n-1,dp);
        dp[n]=max(incl,excl);
        return dp[n];
    }
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n+1,-1);
        return solve(nums,n-1,dp);
    }
};

