//TLE
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int j=0,i=0, n=nums.size();
        int prod=1;
        int maxi=INT_MIN;
        while(j<n)
        {
           prod*=nums[j];
           if(prod>maxi){
            maxi=prod;
           }
           j++;
           if(j==n){
            i++;
            j=i;
            prod=1;
           }
        }
        return maxi;
    }
};

//
class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        if (n == 0) {
            return -1;
        }
        int currmax = nums[0];
        int currmin = nums[0];
        int maxProd = nums[0];

        for (int i = 1; i < n; i++) {
            if (nums[i] < 0) {
                swap(currmax, currmin);
            }
            currmax = max(nums[i], currmax * nums[i]);
            currmin = min(nums[i], currmin * nums[i]);
            maxProd = max(maxProd, currmax);
        }
        return maxProd;
    }
};
