class TrieNode{
    public:
       char ch;
       TrieNode* children[26];
       bool isTerminal;
       TrieNode(char c)
       {
          ch=c;
          for(int i=0;i<26;i++)
          {
             children[i]=NULL;
          }
          isTerminal=false;
       }  
};

class Trie {
public:
    TrieNode* root;
    Trie() {
         root=new TrieNode('\0');
    }
    void insertUtil(TrieNode* root,string word)
    {
        if(word.length()==0)
        {
            root->isTerminal=true;
            return;
        }
        int pos=word[0]-'a';
        TrieNode* child;
        if(root->children[pos]!=NULL){
            child=root->children[pos];
        }
        else{
            child=new TrieNode(word[0]);
            root->children[pos]=child;
            
        }
        insertUtil(child,word.substr(1));
    }
    void insert(string word) {
        insertUtil(root,word);
    }
    
    bool searchUtil(TrieNode* root,string word)
    {
        if(word.length()==0){
            return root->isTerminal;
        }
        int pos=word[0]-'a';
        TrieNode* child;
        if(root->children[pos]!=NULL){
           child=root->children[pos];
        }
        else{
            return false;
        }
        return searchUtil(child,word.substr(1));
    }
    bool search(string word) {
        return searchUtil(root,word);
    }
    
    bool startUtil(TrieNode* root,string prefix)
    {
        if(prefix.length()==0){
            return true;
        }
        int pos=prefix[0]-'a';
        TrieNode* child;
        if(root->children[pos]!=NULL)
        {
            child=root->children[pos];
        }
        else{
            return false;
        }
        return startUtil(child,prefix.substr(1));
    }
    bool startsWith(string prefix) {
        return startUtil(root,prefix);
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
